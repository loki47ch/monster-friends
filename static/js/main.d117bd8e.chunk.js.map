{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","monsters","map","monster","i","key","SearchBox","searchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","props","children","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","filteredMonsters","filter","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yPAYeA,EAVF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACzB,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAK,QAAQC,IAAG,+BAA0BL,EAA1B,4BACrB,4BAAKC,GACL,2BAAIC,KCQQI,EAZE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,yBAAKJ,UAAU,iBAEbI,EAASC,KAAI,SAACC,EAASC,GACtB,OAAO,kBAAC,EAAD,CAAMC,IAAKJ,EAASG,GAAGV,GAAIA,GAAIO,EAASG,GAAGV,GAAIC,KAAMM,EAASG,GAAGT,KAAMC,MAAOK,EAASG,GAAGR,aCAvFU,EANG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,2BAAOV,UAAU,mCAAmCW,KAAK,SAASC,YAAY,kBAAkBC,SAAUH,KCkB7FI,E,YAnBd,aAAe,IAAD,8BACb,+CACKC,MAAQ,CACZC,UAAU,GAHE,E,+EAOIC,EAAOC,GACxBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACN,uFAEDG,KAAKE,MAAMC,a,GAhBQC,aC+CbC,G,kBA1Cd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKN,SAAS,CAAEO,YAAaD,EAAME,OAAOC,SAb1C,EAAKd,MAAQ,CACZY,YAAa,GACbvB,SAAU,IAJE,E,iFAQO,IAAD,OACnB0B,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA3B,GAAa,EAAKgB,SAAS,CAAEhB,SAAUA,S,+BAOrC,IAAD,EAC0Be,KAAKJ,MAA/BX,EADA,EACAA,SAAUuB,EADV,EACUA,YAEZO,EAAmB9B,EAAS+B,QAAO,SAAA7B,GACxC,OAAOA,EAAQR,KAAKsC,cAAcC,SAASV,EAAYS,kBAExD,OAAQhC,EAASkC,OAGhB,kBAAC,WAAD,KACC,yBAAKtC,UAAU,wBACd,wBAAIA,UAAU,eAAd,mBACA,kBAAC,EAAD,CAAWU,aAAcS,KAAKM,kBAE/B,yBAAKzB,UAAU,MACd,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUI,SAAU8B,OATvB,wBAAIlC,UAAU,mBAAd,kB,GA1BeuB,cCMEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,iB","file":"static/js/main.d117bd8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='tc bg-light-yellow dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt= 'robot' src={`https://robohash.org/${id}?set=set2&size=150x150`} />\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ monsters }) => {\r\n\treturn (\r\n\t\t<div className='pa3 flex-wrap'>\r\n\t\t\t{\r\n\t\t\t\tmonsters.map((monster, i) => {\r\n\t\t\t\t\treturn <Card key={monsters[i].id} id={monsters[i].id} name={monsters[i].name} email={monsters[i].email} />\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<input className='pa3 ba b--green bg-washed-yellow' type='search' placeholder='Search Monsters' onChange={searchChange} />\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif(this.state.hasError) {\r\n\t\t\treturn <h1>Well we done messed Up! Bear with us while we fix this!</h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","import React, { Component, Fragment } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tsearchField: '',\r\n\t\t\tmonsters: []\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(monsters => {this.setState({ monsters: monsters })}); \r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value})\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { monsters, searchField } = this.state;\r\n\r\n\t\tconst filteredMonsters = monsters.filter(monster => {\r\n\t\t\treturn monster.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\t\treturn !monsters.length ?\r\n\t\t <h1 className='f1 dark-red pa3'>Loading...</h1> :\r\n\t\t(\r\n\t\t\t<Fragment>\r\n\t\t\t\t<div className='tc mb3 flexwrap h-25'>\r\n\t\t\t\t\t<h1 className='f1 dark-red'>Monster-Friends</h1>\r\n\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList monsters={filteredMonsters}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</div>\r\n\t\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();"],"sourceRoot":""}